// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: credit.sql

package dbgen

import (
	"context"
	"time"
)

const createCredit = `-- name: CreateCredit :one
INSERT INTO credit (
  name
  , transacted_at
  , amount_in_microsgd 
) VALUES ( $1, $2, $3 )
RETURNING id
`

type CreateCreditParams struct {
	Name             string    `json:"name"`
	TransactedAt     time.Time `json:"transacted_at"`
	AmountInMicrosgd int64     `json:"amount_in_microsgd"`
}

func (q *Queries) CreateCredit(ctx context.Context, arg CreateCreditParams) (int64, error) {
	row := q.db.QueryRow(ctx, createCredit, arg.Name, arg.TransactedAt, arg.AmountInMicrosgd)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listCreditByYearMonth = `-- name: ListCreditByYearMonth :many
SELECT id
     , name
     , transacted_at
     , amount_in_microsgd 
     , created_at
FROM credit
WHERE transacted_at BETWEEN $1 and $2
`

type ListCreditByYearMonthParams struct {
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
}

func (q *Queries) ListCreditByYearMonth(ctx context.Context, arg ListCreditByYearMonthParams) ([]Credit, error) {
	rows, err := q.db.Query(ctx, listCreditByYearMonth, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Credit
	for rows.Next() {
		var i Credit
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.TransactedAt,
			&i.AmountInMicrosgd,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
